Task 1 :
CREATE TABLE Venue (
    venue_id INT PRIMARY KEY AUTO_INCREMENT,
    venue_name VARCHAR(255) NOT NULL,
    address TEXT NOT NULL
);

CREATE TABLE Event (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    event_name VARCHAR(255) NOT NULL,
    event_date DATE NOT NULL,
    event_time TIME NOT NULL,
    venue_id INT NOT NULL,
    total_seats INT NOT NULL,
    available_seats INT NOT NULL,
    ticket_price DECIMAL(10,2) NOT NULL,
    event_type ENUM('Movie', 'Sports', 'Concert') NOT NULL,
    booking_id INT,
    FOREIGN KEY (venue_id) REFERENCES Venue(venue_id),
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id)
);

CREATE TABLE Customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(15) UNIQUE NOT NULL,
    booking_id INT,
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id)
);

CREATE TABLE Booking (
    booking_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    event_id INT NOT NULL,
    num_tickets INT NOT NULL,
    total_cost DECIMAL(10,2) NOT NULL,
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customer1(customer_id),
    FOREIGN KEY (event_id) REFERENCES Event(event_id)
);
Task 2:
1)--Insert 10 sample records into Venue table
INSERT INTO Venue (venue_id ,venue_name, address) VALUES
(1,'Stadium A', '123 Main St'),
(2,'Concert Hall B', '456 Broadway'),
(3,'Arena C', '789 Park Ave'),
(4,'Theater D', '101 Elm St'),
(5,'Sports Complex E', '202 Maple St'),
(6,'Cinema F', '303 Oak St'),
(7,'Outdoor Venue G', '404 Pine St'),
(8,'Convention Center H', '505 Birch St'),
(9,'Amphitheater I', '606 Cedar St'),
(10,'Expo Center J', '707 Walnut St');

-- Insert 10 sample records into Event table
INSERT INTO Event (event_id,event_name, event_date, event_time, venue_id, total_seats, available_seats, ticket_price, event_type) VALUES
(1,'Football Cup', '2025-07-10', '18:00:00', 1, 20000, 5000, 1500.00, 'Sports'),
(2,'Rock Concert', '2025-08-15', '20:00:00', 2, 10000, 3000, 2000.00, 'Concert'),
(3,'Basketball Finals', '2023-09-20', '19:30:00', 3, 15000, 7000, 1800.00, 'Sports'),
(4,'Drama Play', '2024-06-05', '17:00:00', 4, 5000, 2000, 1200.00, 'Movie'),
(5,'Cricket Match', '2024-10-10', '15:00:00', 5, 25000, 10000, 2200.00, 'Sports'),
(6,'Jazz Night', '2022-07-25', '21:00:00', 6, 8000, 2000, 2500.00, 'Concert'),
(7,'Movie Premiere', '2023-05-12', '19:00:00', 7, 3000, 1000, 900.00, 'Movie'),
(8,'Tech Conference', '2024-11-18', '09:00:00', 8, 5000, 2500, 500.00, 'Concert'),
(9,'Music Festival', '2025-09-30', '16:00:00', 9, 12000, 6000, 1750.00, 'Concert'),
(10,'Esports Championship', '2025-12-05', '14:00:00', 10, 18000, 8000, 2000.00, 'Sports');

-- Insert 10 sample records into Customer table
INSERT INTO Customer(customer_id,customer_name, email, phone_number, booking_id) VALUES
(1,'John Doe', 'john@example.com', '9876543210', 1),
(2,'Jane Smith', 'jane@example.com', '9876543220', 2),
(3,'Alice Johnson', 'alice@example.com', '9876543230', 3),
(4,'Bob Brown', 'bob@example.com', '9876543240', 4),
(5,'Charlie White', 'charlie@example.com', '9876543250', 5),
(6,'David Black', 'david@example.com', '9876543260', 6),
(7,'Eve Green', 'eve@example.com', '9876543270', 7),
(8,'Frank Blue', 'frank@example.com', '9876543280', 8),
(9,'Grace Yellow', 'grace@example.com', '9876543290', 9),
(10,'Henry Red', 'henry@example.com', '9876543200', 10);

-- Insert 10 sample records into Booking table
INSERT INTO Booking (booking_id, customer_id, event_id, num_tickets, total_cost, booking_date) VALUES
(1, 1, 1, 2, 3000.00, '2024-03-01'),
(2, 2, 2, 3, 6000.00, '2025-03-05'),
(3, 3, 3, 1, 1800.00, '2023-03-10'),
(4, 4, 4, 5, 6000.00, NOW()),
(5, 5, 5, 4, 8800.00, '2025-03-20'),
(6, 6, 6, 2, 5000.00, '2024-03-25'),
(7, 7, 7, 3, 2700.00, '2025-03-28'),
(8, 8, 8, 1, 500.00, '2023-04-01'),
(9, 9, 9, 2, 3500.00, '2022-04-05'),
(10, 10, 10, 6, 12000.00, '2024-04-10');


2)-- Query to list all Events
SELECT * FROM Event;

3)-- Query to select events with available tickets
SELECT * FROM Event WHERE available_seats > 0;

4)-- Query to select events with partial match 'cup'
SELECT * FROM Event WHERE event_name LIKE '%cup%';

5)-- Query to select events with ticket price between 1000 and 2500
SELECT * FROM Event WHERE ticket_price BETWEEN 1000 AND 2500;

6)-- Query to retrieve events within a date range
SELECT * FROM Event WHERE event_date BETWEEN '2025-07-01' AND '2025-12-31';

7)-- Query to retrieve events with available tickets and 'Concert' in the name
SELECT * FROM Event WHERE available_seats > 0 AND event_name LIKE '%Concert%';

8)-- Query to retrieve users in batches of 5 starting from 6th user
SELECT * FROM Customer1 LIMIT 5 OFFSET 5;

9)-- Query to retrieve bookings where num_tickets > 4
SELECT * FROM Booking WHERE num_tickets > 4;

10)-- Query to retrieve customers whose phone number ends with '000'
SELECT * FROM Customer WHERE phone_number LIKE '%000';

11)-- Query to retrieve events ordered by seat capacity more than 15000
SELECT * FROM Event WHERE total_seats > 15000 ORDER BY total_seats DESC;

12)-- Query to select events name not starting with 'x', 'y', 'z'
SELECT * FROM Event WHERE event_name NOT LIKE 'x%' AND event_name NOT LIKE 'y%' AND event_name NOT LIKE 'z%';

TASK 3:
1)-- List Events and Their Average Ticket Prices
SELECT event_name, AVG(ticket_price) AS avg_price FROM Event GROUP BY event_name;

2)-- Calculate the Total Revenue Generated by Events
SELECT event_name, SUM(total_cost) AS total_revenue FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY event_name;

3)-- Find the event with the highest ticket sales
SELECT event_name, SUM(num_tickets) AS total_tickets_sold FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY event_name ORDER BY total_tickets_sold DESC LIMIT 1;

4)-- Calculate the Total Number of Tickets Sold for Each Event
SELECT event_name, SUM(num_tickets) AS total_tickets FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY event_name;

5)-- Find Events with No Ticket Sales
SELECT event_name FROM Event WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Booking);

6)-- Find the User Who Has Booked the Most Tickets
SELECT customer_name, SUM(num_tickets) AS total_tickets FROM Booking JOIN Customer ON Booking.customer_id = Customer.customer_id GROUP BY customer_name ORDER BY total_tickets DESC LIMIT 1;

7)-- List Events and the total number of tickets sold for each month
SELECT MONTH(event_date) AS month, event_name, SUM(num_tickets) AS total_tickets FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY month, event_name;

8)-- Calculate the average Ticket Price for Events in Each Venue
SELECT venue_name, AVG(ticket_price) AS avg_ticket_price FROM Event JOIN Venue ON Event.venue_id = Venue.venue_id GROUP BY venue_name;

9)-- Calculate the total Number of Tickets Sold for Each Event Type
SELECT event_type, SUM(num_tickets) AS total_tickets FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY event_type;

10)-- Calculate the total Revenue Generated by Events in Each Year
SELECT YEAR(event_date) AS year, SUM(total_cost) AS total_revenue FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY year;

11)-- List users who have booked tickets for multiple events
SELECT customer_name, COUNT(DISTINCT event_id) AS event_count FROM Booking JOIN Customer ON Booking.customer_id = Customer.customer_id GROUP BY customer_name HAVING event_count > 1;

12)-- Calculate the Total Revenue Generated by Events for Each User
SELECT customer_name, SUM(total_cost) AS total_revenue FROM Booking JOIN Customer ON Booking.customer_id = Customer.customer_id GROUP BY customer_name;

13)-- Calculate the Average Ticket Price for Events in Each Category and Venue
SELECT event_type, venue_name, AVG(ticket_price) AS avg_price FROM Event JOIN Venue ON Event.venue_id = Venue.venue_id GROUP BY event_type, venue_name;

14)-- List Users and the Total Number of Tickets They've Purchased in the Last 30 Days
SELECT customer_name, SUM(num_tickets) AS total_tickets FROM Booking JOIN Customer ON Booking.customer_id = Customer.customer_id WHERE booking_date >= NOW() - INTERVAL 30 DAY GROUP BY customer_name;

TASK 4:

1)-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_name, (SELECT AVG(ticket_price) FROM Event WHERE Event.venue_id = Venue.venue_id) AS avg_ticket_price FROM Venue;

2)-- Find Events with More Than 50% of Tickets Sold using subquery
SELECT event_name FROM Event WHERE total_seats - available_seats > total_seats * 0.5;

3)-- Calculate the Total Number of Tickets Sold for Each Event
SELECT event_name, (SELECT SUM(num_tickets) FROM Booking WHERE Booking.event_id = Event.event_id) AS total_tickets FROM Event;

4)-- Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery
SELECT customer_name FROM Customer WHERE NOT EXISTS (SELECT 1 FROM Booking WHERE Booking.customer_id = Customer.customer_id);

5)-- List Events with No Ticket Sales Using a NOT IN Subquery
SELECT event_name FROM Event WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Booking);

6)-- Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause
SELECT event_type, SUM(total_tickets) AS total_tickets FROM (SELECT event_type, SUM(num_tickets) AS total_tickets FROM Booking JOIN Event ON Booking.event_id = Event.event_id GROUP BY event_type) AS ticket_counts GROUP BY event_type;

7)-- Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause
SELECT event_name FROM Event WHERE ticket_price > (SELECT AVG(ticket_price) FROM Event);

8)-- Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery
SELECT customer_name, (SELECT SUM(total_cost) FROM Booking WHERE Booking.customer_id = Customer.customer_id) AS total_revenue FROM Customer;

9)-- List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause
SELECT customer_name FROM Customer WHERE customer_id IN (SELECT customer_id FROM Booking WHERE event_id IN (SELECT event_id FROM Event WHERE venue_id = 1));

10)-- Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY
SELECT event_type, (SELECT SUM(num_tickets) FROM Booking WHERE Booking.event_id = Event.event_id) AS total_tickets FROM Event GROUP BY event_type;

11)-- Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT
SELECT customer_name, DATE_FORMAT(booking_date, '%Y-%m') AS booking_month FROM Booking JOIN Customer ON Booking.customer_id = Customer.customer_id GROUP BY customer_name, booking_month;

12)crcr-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_name, (SELECT AVG(ticket_price) FROM Event WHERE Event.venue_id = Venue.venue_id) AS avg_ticket_price FROM Venue;

